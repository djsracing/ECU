
ECU-Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000c84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000983  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f8  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a8  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a2  00000000  00000000  00002739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002cdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  74:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z8adc_initv>:
uint16_t adc_value;            //Variable used to store the value read from the ADC
void adc_init(void);            //Function to initialize/configure the ADC
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analog channel/pin

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));   // 16Mhz/128 = 125Khz the ADC reference clock
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	87 60       	ori	r24, 0x07	; 7
  80:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);                            // Turn on ADC
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);                            // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	80 64       	ori	r24, 0x40	; 64
  92:	86 b9       	out	0x06, r24	; 6
  94:	08 95       	ret

00000096 <_Z8read_adch>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                            // Clear the older channel that was read
  96:	97 b1       	in	r25, 0x07	; 7
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;                            // Defines the new ADC channel to be read
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	89 2b       	or	r24, r25
  a0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);                            // Starts a new conversion
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<<ADSC));                        // Wait until the conversion is done
  a8:	36 99       	sbic	0x06, 6	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <_Z8read_adch+0x12>
	return ADCW;                                // Returns the ADC value of the chosen channel
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
}
  b0:	08 95       	ret

000000b2 <_Z8PWM_initv>:
void PWM_init(){
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	89 66       	ori	r24, 0x69	; 105
  b6:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<3);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	87 bb       	out	0x17, r24	; 23
  be:	08 95       	ret

000000c0 <_Z3modf>:
}
float mod(float p){
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	6b 01       	movw	r12, r22
  ca:	7c 01       	movw	r14, r24
	if(p>0)
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	a9 01       	movw	r20, r18
  d2:	0e 94 94 05 	call	0xb28	; 0xb28 <__gesf2>
  d6:	18 16       	cp	r1, r24
  d8:	24 f0       	brlt	.+8      	; 0xe2 <_Z3modf+0x22>
	return p;
	else
	return -p;
  da:	c7 01       	movw	r24, r14
  dc:	b6 01       	movw	r22, r12
  de:	90 58       	subi	r25, 0x80	; 128
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <_Z3modf+0x26>
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
	DDRB|=(1<<3);
}
float mod(float p){
	if(p>0)
	return p;
  e2:	c7 01       	movw	r24, r14
  e4:	b6 01       	movw	r22, r12
	else
	return -p;
}
  e6:	ff 90       	pop	r15
  e8:	ef 90       	pop	r14
  ea:	df 90       	pop	r13
  ec:	cf 90       	pop	r12
  ee:	08 95       	ret

000000f0 <_Z7mappingddddd>:
double mapping(double n, double in_min, double in_max, double out_min, double out_max)
{
  f0:	4f 92       	push	r4
  f2:	5f 92       	push	r5
  f4:	6f 92       	push	r6
  f6:	7f 92       	push	r7
  f8:	af 92       	push	r10
  fa:	bf 92       	push	r11
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	2c 97       	sbiw	r28, 0x0c	; 12
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	29 01       	movw	r4, r18
 11e:	3a 01       	movw	r6, r20
 120:	e9 82       	std	Y+1, r14	; 0x01
 122:	fa 82       	std	Y+2, r15	; 0x02
 124:	0b 83       	std	Y+3, r16	; 0x03
 126:	1c 83       	std	Y+4, r17	; 0x04
	return out_min+ ((n - in_min) * ((out_max - out_min) / (in_max - in_min))) ;
 128:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 12c:	6d 83       	std	Y+5, r22	; 0x05
 12e:	7e 83       	std	Y+6, r23	; 0x06
 130:	8f 83       	std	Y+7, r24	; 0x07
 132:	98 87       	std	Y+8, r25	; 0x08
 134:	a6 01       	movw	r20, r12
 136:	95 01       	movw	r18, r10
 138:	6d 8d       	ldd	r22, Y+29	; 0x1d
 13a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 13c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 13e:	98 a1       	ldd	r25, Y+32	; 0x20
 140:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 144:	69 87       	std	Y+9, r22	; 0x09
 146:	7a 87       	std	Y+10, r23	; 0x0a
 148:	8b 87       	std	Y+11, r24	; 0x0b
 14a:	9c 87       	std	Y+12, r25	; 0x0c
 14c:	a3 01       	movw	r20, r6
 14e:	92 01       	movw	r18, r4
 150:	c8 01       	movw	r24, r16
 152:	b7 01       	movw	r22, r14
 154:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	69 85       	ldd	r22, Y+9	; 0x09
 15e:	7a 85       	ldd	r23, Y+10	; 0x0a
 160:	8b 85       	ldd	r24, Y+11	; 0x0b
 162:	9c 85       	ldd	r25, Y+12	; 0x0c
 164:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 168:	9b 01       	movw	r18, r22
 16a:	ac 01       	movw	r20, r24
 16c:	6d 81       	ldd	r22, Y+5	; 0x05
 16e:	7e 81       	ldd	r23, Y+6	; 0x06
 170:	8f 81       	ldd	r24, Y+7	; 0x07
 172:	98 85       	ldd	r25, Y+8	; 0x08
 174:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
 178:	9b 01       	movw	r18, r22
 17a:	ac 01       	movw	r20, r24
 17c:	c6 01       	movw	r24, r12
 17e:	b5 01       	movw	r22, r10
 180:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__addsf3>
}
 184:	2c 96       	adiw	r28, 0x0c	; 12
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	7f 90       	pop	r7
 1a6:	6f 90       	pop	r6
 1a8:	5f 90       	pop	r5
 1aa:	4f 90       	pop	r4
 1ac:	08 95       	ret

000001ae <main>:

int main(){
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	2e 97       	sbiw	r28, 0x0e	; 14
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
	DDRA=0x00;
 1c2:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 1c4:	1b ba       	out	0x1b, r1	; 27
	DDRD = 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	81 bb       	out	0x11, r24	; 17
	adc_init();
 1ca:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z8adc_initv>
	PWM_init();
 1ce:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z8PWM_initv>
	float apps1,apps2,bps,a,b;
	int rtdb,bps_scs,SD,CS;
	while(1)
	{
		rtdb = read_adc(RTDB_pin);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 1d8:	3c 01       	movw	r6, r24
		bps = read_adc(BPS_pin);
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 1e0:	bc 01       	movw	r22, r24
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 1ea:	6b 01       	movw	r12, r22
 1ec:	7c 01       	movw	r14, r24
		bps_scs=read_adc(bps_scs_pin);
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 1f4:	2c 01       	movw	r4, r24
		SD=read_adc(SD_pin);
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 1fc:	9e 87       	std	Y+14, r25	; 0x0e
 1fe:	8d 87       	std	Y+13, r24	; 0x0d
		if(bps>=bps_th && rtdb>=512 && SD>512 && bps_scs>512 && rtdmode == 0){
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	48 e4       	ldi	r20, 0x48	; 72
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	c7 01       	movw	r24, r14
 20a:	b6 01       	movw	r22, r12
 20c:	0e 94 94 05 	call	0xb28	; 0xb28 <__gesf2>
 210:	88 23       	and	r24, r24
 212:	b4 f1       	brlt	.+108    	; 0x280 <main+0xd2>
 214:	61 14       	cp	r6, r1
 216:	22 e0       	ldi	r18, 0x02	; 2
 218:	72 06       	cpc	r7, r18
 21a:	94 f1       	brlt	.+100    	; 0x280 <main+0xd2>
 21c:	8d 85       	ldd	r24, Y+13	; 0x0d
 21e:	9e 85       	ldd	r25, Y+14	; 0x0e
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	92 40       	sbci	r25, 0x02	; 2
 224:	6c f1       	brlt	.+90     	; 0x280 <main+0xd2>
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	44 16       	cp	r4, r20
 22a:	42 e0       	ldi	r20, 0x02	; 2
 22c:	54 06       	cpc	r5, r20
 22e:	44 f1       	brlt	.+80     	; 0x280 <main+0xd2>
 230:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rtdmode>
 234:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rtdmode+0x1>
 238:	89 2b       	or	r24, r25
 23a:	11 f5       	brne	.+68     	; 0x280 <main+0xd2>
			TCNT1=0;
 23c:	1d bc       	out	0x2d, r1	; 45
 23e:	1c bc       	out	0x2c, r1	; 44
			TCCR1B|=(1<<CS10)|(1<<CS12);
 240:	8e b5       	in	r24, 0x2e	; 46
 242:	85 60       	ori	r24, 0x05	; 5
 244:	8e bd       	out	0x2e, r24	; 46
			
			while(TCNT1<=2000*16){
 246:	8c b5       	in	r24, 0x2c	; 44
 248:	9d b5       	in	r25, 0x2d	; 45
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	9d 47       	sbci	r25, 0x7D	; 125
 24e:	38 f4       	brcc	.+14     	; 0x25e <main+0xb0>
				PORTD |= (1<<testled);//change to buzzer later
 250:	82 b3       	in	r24, 0x12	; 18
 252:	80 62       	ori	r24, 0x20	; 32
 254:	82 bb       	out	0x12, r24	; 18
				PORTD |= (1<<buzzer);
 256:	82 b3       	in	r24, 0x12	; 18
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	82 bb       	out	0x12, r24	; 18
		SD=read_adc(SD_pin);
		if(bps>=bps_th && rtdb>=512 && SD>512 && bps_scs>512 && rtdmode == 0){
			TCNT1=0;
			TCCR1B|=(1<<CS10)|(1<<CS12);
			
			while(TCNT1<=2000*16){
 25c:	f4 cf       	rjmp	.-24     	; 0x246 <main+0x98>
				PORTD |= (1<<testled);//change to buzzer later
				PORTD |= (1<<buzzer);
			}
			
			PORTD &= ~(1<<testled);
 25e:	82 b3       	in	r24, 0x12	; 18
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1<<buzzer);
 264:	82 b3       	in	r24, 0x12	; 18
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	82 bb       	out	0x12, r24	; 18
			TCCR1B &=~((1<<CS10)|(1<<CS12));
 26a:	8e b5       	in	r24, 0x2e	; 46
 26c:	8a 7f       	andi	r24, 0xFA	; 250
 26e:	8e bd       	out	0x2e, r24	; 46
			TCNT1 =0;
 270:	1d bc       	out	0x2d, r1	; 45
 272:	1c bc       	out	0x2c, r1	; 44
			rtdmode = 1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <rtdmode+0x1>
 27c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rtdmode>
		}
		
		if(rtdmode){ //Enters RTD mode
 280:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rtdmode>
 284:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rtdmode+0x1>
 288:	89 2b       	or	r24, r25
 28a:	09 f4       	brne	.+2      	; 0x28e <main+0xe0>
 28c:	a2 cf       	rjmp	.-188    	; 0x1d2 <main+0x24>
			PORTD |= (1<<RTD_LED);
 28e:	82 b3       	in	r24, 0x12	; 18
 290:	88 60       	ori	r24, 0x08	; 8
 292:	82 bb       	out	0x12, r24	; 18
			
			PORTD|=(1<<motorcontroller);
 294:	82 b3       	in	r24, 0x12	; 18
 296:	80 61       	ori	r24, 0x10	; 16
 298:	82 bb       	out	0x12, r24	; 18
			bps=read_adc(BPS_pin);
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 2a0:	bc 01       	movw	r22, r24
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 2aa:	69 87       	std	Y+9, r22	; 0x09
 2ac:	7a 87       	std	Y+10, r23	; 0x0a
 2ae:	8b 87       	std	Y+11, r24	; 0x0b
 2b0:	9c 87       	std	Y+12, r25	; 0x0c
			apps1=read_adc(apps1_pin);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 2b8:	bc 01       	movw	r22, r24
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 2c2:	69 83       	std	Y+1, r22	; 0x01
 2c4:	7a 83       	std	Y+2, r23	; 0x02
 2c6:	8b 83       	std	Y+3, r24	; 0x03
 2c8:	9c 83       	std	Y+4, r25	; 0x04
			apps2=read_adc(apps2_pin);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 2d0:	bc 01       	movw	r22, r24
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 2da:	6b 01       	movw	r12, r22
 2dc:	7c 01       	movw	r14, r24
			a = ((float)(apps1-lt1)/(float)(ht1-lt1));
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	54 e4       	ldi	r21, 0x44	; 68
 2e6:	69 81       	ldd	r22, Y+1	; 0x01
 2e8:	7a 81       	ldd	r23, Y+2	; 0x02
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e8       	ldi	r19, 0x80	; 128
 2f6:	4f ef       	ldi	r20, 0xFF	; 255
 2f8:	53 e4       	ldi	r21, 0x43	; 67
 2fa:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 2fe:	2b 01       	movw	r4, r22
 300:	3c 01       	movw	r6, r24
			b = ((float)(apps2-lt2)/(float)(ht2-lt2));
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	4c e4       	ldi	r20, 0x4C	; 76
 308:	53 e4       	ldi	r21, 0x43	; 67
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	4e e4       	ldi	r20, 0x4E	; 78
 318:	53 e4       	ldi	r21, 0x43	; 67
 31a:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 31e:	6d 83       	std	Y+5, r22	; 0x05
 320:	7e 83       	std	Y+6, r23	; 0x06
 322:	8f 83       	std	Y+7, r24	; 0x07
 324:	98 87       	std	Y+8, r25	; 0x08
			//rtdb = read_adc(RTDB_pin);
			
		   OCR0=mapping(apps1,lt1,ht1,0,255);
 326:	83 e4       	ldi	r24, 0x43	; 67
 328:	8f 93       	push	r24
 32a:	8f e7       	ldi	r24, 0x7F	; 127
 32c:	8f 93       	push	r24
 32e:	1f 92       	push	r1
 330:	1f 92       	push	r1
 332:	a1 2c       	mov	r10, r1
 334:	b1 2c       	mov	r11, r1
 336:	65 01       	movw	r12, r10
 338:	e1 2c       	mov	r14, r1
 33a:	10 ec       	ldi	r17, 0xC0	; 192
 33c:	f1 2e       	mov	r15, r17
 33e:	0f e7       	ldi	r16, 0x7F	; 127
 340:	14 e4       	ldi	r17, 0x44	; 68
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	54 e4       	ldi	r21, 0x44	; 68
 34a:	69 81       	ldd	r22, Y+1	; 0x01
 34c:	7a 81       	ldd	r23, Y+2	; 0x02
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	9c 81       	ldd	r25, Y+4	; 0x04
 352:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z7mappingddddd>
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixunssfsi>
 362:	6c bf       	out	0x3c, r22	; 60
			
			
			while(SD < 512 ){
 364:	8d 85       	ldd	r24, Y+13	; 0x0d
 366:	9e 85       	ldd	r25, Y+14	; 0x0e
 368:	81 15       	cp	r24, r1
 36a:	92 40       	sbci	r25, 0x02	; 2
 36c:	8c f4       	brge	.+34     	; 0x390 <main+0x1e2>
				SD=read_adc(SD_pin);
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 374:	9e 87       	std	Y+14, r25	; 0x0e
 376:	8d 87       	std	Y+13, r24	; 0x0d
				OCR0=0;
 378:	1c be       	out	0x3c, r1	; 60
				PORTD&=~(1<<motorcontroller);
 37a:	82 b3       	in	r24, 0x12	; 18
 37c:	8f 7e       	andi	r24, 0xEF	; 239
 37e:	82 bb       	out	0x12, r24	; 18
				PORTD&=~(1<<RTD_LED);
 380:	82 b3       	in	r24, 0x12	; 18
 382:	87 7f       	andi	r24, 0xF7	; 247
 384:	82 bb       	out	0x12, r24	; 18
				rtdmode=0;
 386:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rtdmode+0x1>
 38a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rtdmode>
			//rtdb = read_adc(RTDB_pin);
			
		   OCR0=mapping(apps1,lt1,ht1,0,255);
			
			
			while(SD < 512 ){
 38e:	ea cf       	rjmp	.-44     	; 0x364 <main+0x1b6>
				PORTD&=~(1<<motorcontroller);
				PORTD&=~(1<<RTD_LED);
				rtdmode=0;
			}
			//--------------------------------------------BRAKE FAULT------------------------------------------------------------------
			CS = read_adc(CS_pin);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
			if(CS >= 512){
 396:	81 15       	cp	r24, r1
 398:	92 40       	sbci	r25, 0x02	; 2
 39a:	54 f0       	brlt	.+20     	; 0x3b0 <main+0x202>
				cs_state = 1;//>5kW 
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				PORTD |= (1<<3)|(1<<4)|(1<<5);//for testing purpose only, remove later
 3a8:	82 b3       	in	r24, 0x12	; 18
 3aa:	88 63       	ori	r24, 0x38	; 56
 3ac:	82 bb       	out	0x12, r24	; 18
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <main+0x210>
			}else{
				cs_state =0;//<5kW
 3b0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				PORTD &= ~((1<<3)|(1<<4)|(1<<5));
 3b8:	82 b3       	in	r24, 0x12	; 18
 3ba:	87 7c       	andi	r24, 0xC7	; 199
 3bc:	82 bb       	out	0x12, r24	; 18
			}
			if(cs_state == 1 && bps>=bps_th && brakefault==0 && rtdmode==1){ 
 3be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	31 f5       	brne	.+76     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	48 e4       	ldi	r20, 0x48	; 72
 3d0:	53 e4       	ldi	r21, 0x43	; 67
 3d2:	69 85       	ldd	r22, Y+9	; 0x09
 3d4:	7a 85       	ldd	r23, Y+10	; 0x0a
 3d6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3d8:	9c 85       	ldd	r25, Y+12	; 0x0c
 3da:	0e 94 94 05 	call	0xb28	; 0xb28 <__gesf2>
 3de:	88 23       	and	r24, r24
 3e0:	d4 f0       	brlt	.+52     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3e2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <brakefault>
 3e6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <brakefault+0x1>
 3ea:	89 2b       	or	r24, r25
 3ec:	a1 f4       	brne	.+40     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ee:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rtdmode>
 3f2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rtdmode+0x1>
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	71 f4       	brne	.+28     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
				PORTD|=(1<<bspd_led);
 3fa:	82 b3       	in	r24, 0x12	; 18
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	82 bb       	out	0x12, r24	; 18
				//PORTD&= ~(1<<RTD_LED);
				TCNT1=0;
 400:	1d bc       	out	0x2d, r1	; 45
 402:	1c bc       	out	0x2c, r1	; 44
				TCCR1B|=(1<<CS10)|(1<<CS12);
 404:	8e b5       	in	r24, 0x2e	; 46
 406:	85 60       	ori	r24, 0x05	; 5
 408:	8e bd       	out	0x2e, r24	; 46
				brakefault=1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <brakefault+0x1>
 412:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <brakefault>
			}
			while(brakefault==1){
 416:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <brakefault>
 41a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <brakefault+0x1>
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	72 c0       	rjmp	.+228    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
				bps=read_adc(BPS_pin);
 424:	84 e0       	ldi	r24, 0x04	; 4
 426:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 42a:	bc 01       	movw	r22, r24
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 434:	6b 01       	movw	r12, r22
 436:	7c 01       	movw	r14, r24
				apps1=read_adc(apps1_pin);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 43e:	bc 01       	movw	r22, r24
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 448:	2b 01       	movw	r4, r22
 44a:	3c 01       	movw	r6, r24
				CS = read_adc(CS_pin);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 452:	9a 83       	std	Y+2, r25	; 0x02
 454:	89 83       	std	Y+1, r24	; 0x01
				a = ((float)(apps1-lt1)/(float)(ht1-lt1));
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	54 e4       	ldi	r21, 0x44	; 68
 45e:	c3 01       	movw	r24, r6
 460:	b2 01       	movw	r22, r4
 462:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e8       	ldi	r19, 0x80	; 128
 46a:	4f ef       	ldi	r20, 0xFF	; 255
 46c:	53 e4       	ldi	r21, 0x43	; 67
 46e:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 472:	2b 01       	movw	r4, r22
 474:	3c 01       	movw	r6, r24
				b = ((float)(apps2-lt2)/(float)(ht2-lt2));
				//change to 500
				if(TCNT1<2000*16 && ((CS<512) || bps<bps_th)){ 
 476:	8c b5       	in	r24, 0x2c	; 44
 478:	9d b5       	in	r25, 0x2d	; 45
 47a:	81 15       	cp	r24, r1
 47c:	9d 47       	sbci	r25, 0x7D	; 125
 47e:	88 f4       	brcc	.+34     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	9a 81       	ldd	r25, Y+2	; 0x02
 484:	81 15       	cp	r24, r1
 486:	92 40       	sbci	r25, 0x02	; 2
 488:	74 f0       	brlt	.+28     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	48 e4       	ldi	r20, 0x48	; 72
 490:	53 e4       	ldi	r21, 0x43	; 67
 492:	c7 01       	movw	r24, r14
 494:	b6 01       	movw	r22, r12
 496:	0e 94 3c 04 	call	0x878	; 0x878 <__cmpsf2>
 49a:	88 23       	and	r24, r24
 49c:	34 f0       	brlt	.+12     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	88 23       	and	r24, r24
 4ae:	79 f0       	breq	.+30     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
					PORTD |= (1<<RTD_LED);
 4b0:	82 b3       	in	r24, 0x12	; 18
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	82 bb       	out	0x12, r24	; 18
					PORTD &=~(1<<bspd_led);
 4b6:	82 b3       	in	r24, 0x12	; 18
 4b8:	8f 77       	andi	r24, 0x7F	; 127
 4ba:	82 bb       	out	0x12, r24	; 18
					TCCR1B &=~((1<<CS10)|(1<<CS12));
 4bc:	8e b5       	in	r24, 0x2e	; 46
 4be:	8a 7f       	andi	r24, 0xFA	; 250
 4c0:	8e bd       	out	0x2e, r24	; 46
					TCNT1 =0;
 4c2:	1d bc       	out	0x2d, r1	; 45
 4c4:	1c bc       	out	0x2c, r1	; 44
					brakefault = 0;
 4c6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <brakefault+0x1>
 4ca:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <brakefault>
				}
				if(TCNT1>2000*16){
 4ce:	8c b5       	in	r24, 0x2c	; 44
 4d0:	9d b5       	in	r25, 0x2d	; 45
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	9d 47       	sbci	r25, 0x7D	; 125
 4d6:	08 f4       	brcc	.+2      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d8:	9e cf       	rjmp	.-196    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
					PORTD &=~(1<<motorcontroller);
 4da:	82 b3       	in	r24, 0x12	; 18
 4dc:	8f 7e       	andi	r24, 0xEF	; 239
 4de:	82 bb       	out	0x12, r24	; 18
					OCR0=0;
 4e0:	1c be       	out	0x3c, r1	; 60
					TCCR1B &=~((1<<CS10)|(1<<CS12));
 4e2:	8e b5       	in	r24, 0x2e	; 46
 4e4:	8a 7f       	andi	r24, 0xFA	; 250
 4e6:	8e bd       	out	0x2e, r24	; 46
					TCNT1 =0;
 4e8:	1d bc       	out	0x2d, r1	; 45
 4ea:	1c bc       	out	0x2c, r1	; 44
					PORTD&= ~(1<<RTD_LED);
 4ec:	82 b3       	in	r24, 0x12	; 18
 4ee:	87 7f       	andi	r24, 0xF7	; 247
 4f0:	82 bb       	out	0x12, r24	; 18
					flag1=1;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <flag1+0x1>
 4fa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flag1>
					brakefault=0;
 4fe:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <brakefault+0x1>
 502:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <brakefault>
 506:	87 cf       	rjmp	.-242    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
				}
			}//to make it start up again,apps has to be less than 5%
			while(flag1==1){
 508:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag1>
 50c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <flag1+0x1>
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	09 f0       	breq	.+2      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 514:	9c c0       	rjmp	.+312    	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
				apps1=read_adc(apps1_pin);
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 51c:	bc 01       	movw	r22, r24
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 526:	69 83       	std	Y+1, r22	; 0x01
 528:	7a 83       	std	Y+2, r23	; 0x02
 52a:	8b 83       	std	Y+3, r24	; 0x03
 52c:	9c 83       	std	Y+4, r25	; 0x04
				apps2=read_adc(apps2_pin);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 534:	bc 01       	movw	r22, r24
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 53e:	6b 01       	movw	r12, r22
 540:	7c 01       	movw	r14, r24
				PORTD&= ~(1<<RTD_LED);
 542:	82 b3       	in	r24, 0x12	; 18
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	82 bb       	out	0x12, r24	; 18
				a = ((float)(apps1-lt1)/(float)(ht1-lt1));
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	54 e4       	ldi	r21, 0x44	; 68
 550:	69 81       	ldd	r22, Y+1	; 0x01
 552:	7a 81       	ldd	r23, Y+2	; 0x02
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	9c 81       	ldd	r25, Y+4	; 0x04
 558:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e8       	ldi	r19, 0x80	; 128
 560:	4f ef       	ldi	r20, 0xFF	; 255
 562:	53 e4       	ldi	r21, 0x43	; 67
 564:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 568:	2b 01       	movw	r4, r22
 56a:	3c 01       	movw	r6, r24
				b = ((float)(apps2-lt2)/(float)(ht2-lt2));
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	4c e4       	ldi	r20, 0x4C	; 76
 572:	53 e4       	ldi	r21, 0x43	; 67
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	4e e4       	ldi	r20, 0x4E	; 78
 582:	53 e4       	ldi	r21, 0x43	; 67
 584:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 588:	6d 83       	std	Y+5, r22	; 0x05
 58a:	7e 83       	std	Y+6, r23	; 0x06
 58c:	8f 83       	std	Y+7, r24	; 0x07
 58e:	98 87       	std	Y+8, r25	; 0x08
				if(a>0.05 || b>0.05){ 
 590:	2d ec       	ldi	r18, 0xCD	; 205
 592:	3c ec       	ldi	r19, 0xCC	; 204
 594:	4c e4       	ldi	r20, 0x4C	; 76
 596:	5d e3       	ldi	r21, 0x3D	; 61
 598:	c3 01       	movw	r24, r6
 59a:	b2 01       	movw	r22, r4
 59c:	0e 94 94 05 	call	0xb28	; 0xb28 <__gesf2>
 5a0:	18 16       	cp	r1, r24
 5a2:	64 f0       	brlt	.+24     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 5a4:	2d ec       	ldi	r18, 0xCD	; 205
 5a6:	3c ec       	ldi	r19, 0xCC	; 204
 5a8:	4c e4       	ldi	r20, 0x4C	; 76
 5aa:	5d e3       	ldi	r21, 0x3D	; 61
 5ac:	6d 81       	ldd	r22, Y+5	; 0x05
 5ae:	7e 81       	ldd	r23, Y+6	; 0x06
 5b0:	8f 81       	ldd	r24, Y+7	; 0x07
 5b2:	98 85       	ldd	r25, Y+8	; 0x08
 5b4:	0e 94 94 05 	call	0xb28	; 0xb28 <__gesf2>
 5b8:	18 16       	cp	r1, r24
 5ba:	2c f4       	brge	.+10     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
					OCR0=0;
 5bc:	1c be       	out	0x3c, r1	; 60
					PORTD&=~(1<<motorcontroller);
 5be:	82 b3       	in	r24, 0x12	; 18
 5c0:	8f 7e       	andi	r24, 0xEF	; 239
 5c2:	82 bb       	out	0x12, r24	; 18
 5c4:	a1 cf       	rjmp	.-190    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
				}
				else if(a<0.05 || b < 0.05){ 
 5c6:	2d ec       	ldi	r18, 0xCD	; 205
 5c8:	3c ec       	ldi	r19, 0xCC	; 204
 5ca:	4c e4       	ldi	r20, 0x4C	; 76
 5cc:	5d e3       	ldi	r21, 0x3D	; 61
 5ce:	c3 01       	movw	r24, r6
 5d0:	b2 01       	movw	r22, r4
 5d2:	0e 94 3c 04 	call	0x878	; 0x878 <__cmpsf2>
 5d6:	88 23       	and	r24, r24
 5d8:	6c f0       	brlt	.+26     	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 5da:	2d ec       	ldi	r18, 0xCD	; 205
 5dc:	3c ec       	ldi	r19, 0xCC	; 204
 5de:	4c e4       	ldi	r20, 0x4C	; 76
 5e0:	5d e3       	ldi	r21, 0x3D	; 61
 5e2:	6d 81       	ldd	r22, Y+5	; 0x05
 5e4:	7e 81       	ldd	r23, Y+6	; 0x06
 5e6:	8f 81       	ldd	r24, Y+7	; 0x07
 5e8:	98 85       	ldd	r25, Y+8	; 0x08
 5ea:	0e 94 3c 04 	call	0x878	; 0x878 <__cmpsf2>
 5ee:	88 23       	and	r24, r24
 5f0:	0c f0       	brlt	.+2      	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 5f2:	8a cf       	rjmp	.-236    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
					OCR0=mapping(apps1,lt1,ht1,0,255);
 5f4:	83 e4       	ldi	r24, 0x43	; 67
 5f6:	8f 93       	push	r24
 5f8:	8f e7       	ldi	r24, 0x7F	; 127
 5fa:	8f 93       	push	r24
 5fc:	1f 92       	push	r1
 5fe:	1f 92       	push	r1
 600:	a1 2c       	mov	r10, r1
 602:	b1 2c       	mov	r11, r1
 604:	65 01       	movw	r12, r10
 606:	e1 2c       	mov	r14, r1
 608:	10 ec       	ldi	r17, 0xC0	; 192
 60a:	f1 2e       	mov	r15, r17
 60c:	0f e7       	ldi	r16, 0x7F	; 127
 60e:	14 e4       	ldi	r17, 0x44	; 68
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	54 e4       	ldi	r21, 0x44	; 68
 618:	69 81       	ldd	r22, Y+1	; 0x01
 61a:	7a 81       	ldd	r23, Y+2	; 0x02
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	9c 81       	ldd	r25, Y+4	; 0x04
 620:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z7mappingddddd>
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixunssfsi>
 630:	6c bf       	out	0x3c, r22	; 60
					PORTD|=(1<<motorcontroller);
 632:	82 b3       	in	r24, 0x12	; 18
 634:	80 61       	ori	r24, 0x10	; 16
 636:	82 bb       	out	0x12, r24	; 18
					PORTD |= (1<<RTD_LED);
 638:	82 b3       	in	r24, 0x12	; 18
 63a:	88 60       	ori	r24, 0x08	; 8
 63c:	82 bb       	out	0x12, r24	; 18
					PORTD &= ~(1<<bspd_led);
 63e:	82 b3       	in	r24, 0x12	; 18
 640:	8f 77       	andi	r24, 0x7F	; 127
 642:	82 bb       	out	0x12, r24	; 18
					flag1=0;
 644:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag1+0x1>
 648:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag1>
 64c:	5d cf       	rjmp	.-326    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
				}
			}
			
			//-------------------------------------------------------APPS FAULT-----------------------------------------------------------
			
			if(mod(a-b)>0.5 && rtdmode==1){ //changed to 0.5 for testing
 64e:	2d 81       	ldd	r18, Y+5	; 0x05
 650:	3e 81       	ldd	r19, Y+6	; 0x06
 652:	4f 81       	ldd	r20, Y+7	; 0x07
 654:	58 85       	ldd	r21, Y+8	; 0x08
 656:	c3 01       	movw	r24, r6
 658:	b2 01       	movw	r22, r4
 65a:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 65e:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z3modf>
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	5f e3       	ldi	r21, 0x3F	; 63
 66a:	0e 94 94 05 	call	0xb28	; 0xb28 <__gesf2>
 66e:	18 16       	cp	r1, r24
 670:	44 f4       	brge	.+16     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
 672:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rtdmode>
 676:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <rtdmode+0x1>
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	21 f0       	breq	.+8      	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	03 c0       	rjmp	.+6      	; 0x688 <__EEPROM_REGION_LENGTH__+0x288>
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	01 c0       	rjmp	.+2      	; 0x688 <__EEPROM_REGION_LENGTH__+0x288>
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	88 23       	and	r24, r24
 68a:	59 f0       	breq	.+22     	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
				TCNT1= 0;
 68c:	1d bc       	out	0x2d, r1	; 45
 68e:	1c bc       	out	0x2c, r1	; 44
				TCCR1B |=(1<<CS10)|(1<<CS12);
 690:	8e b5       	in	r24, 0x2e	; 46
 692:	85 60       	ori	r24, 0x05	; 5
 694:	8e bd       	out	0x2e, r24	; 46
				appsfault=1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <appsfault+0x1>
 69e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <appsfault>
			}
			while(appsfault==1){//change tcnt to make delay to 100m
 6a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <appsfault>
 6a6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <appsfault+0x1>
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__EEPROM_REGION_LENGTH__+0x2b0>
 6ae:	91 cd       	rjmp	.-1246   	; 0x1d2 <main+0x24>
				apps1=read_adc(apps1_pin);
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 6b6:	bc 01       	movw	r22, r24
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 6c0:	6b 01       	movw	r12, r22
 6c2:	7c 01       	movw	r14, r24
				apps2=read_adc(apps2_pin);
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8read_adch>
 6ca:	bc 01       	movw	r22, r24
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 6d4:	2b 01       	movw	r4, r22
 6d6:	3c 01       	movw	r6, r24
				//PORTD |= (1<<testled);//for testing
				PORTD |= (1<<apps_led);
 6d8:	82 b3       	in	r24, 0x12	; 18
 6da:	80 64       	ori	r24, 0x40	; 64
 6dc:	82 bb       	out	0x12, r24	; 18
				a = ((float)(apps1-lt1)/(float)(ht1-lt1));
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	54 e4       	ldi	r21, 0x44	; 68
 6e6:	c7 01       	movw	r24, r14
 6e8:	b6 01       	movw	r22, r12
 6ea:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	30 e8       	ldi	r19, 0x80	; 128
 6f2:	4f ef       	ldi	r20, 0xFF	; 255
 6f4:	53 e4       	ldi	r21, 0x43	; 67
 6f6:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 6fa:	6b 01       	movw	r12, r22
 6fc:	7c 01       	movw	r14, r24
				b = ((float)(apps2-lt2)/(float)(ht2-lt2));
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	4c e4       	ldi	r20, 0x4C	; 76
 704:	53 e4       	ldi	r21, 0x43	; 67
 706:	c3 01       	movw	r24, r6
 708:	b2 01       	movw	r22, r4
 70a:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	4e e4       	ldi	r20, 0x4E	; 78
 714:	53 e4       	ldi	r21, 0x43	; 67
 716:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
				if(TCNT1 <=2000*16 && (mod(a-b)<0.5)){ //changed to 0.5 for testing
 71a:	2c b5       	in	r18, 0x2c	; 44
 71c:	3d b5       	in	r19, 0x2d	; 45
 71e:	21 30       	cpi	r18, 0x01	; 1
 720:	3d 47       	sbci	r19, 0x7D	; 125
 722:	90 f4       	brcc	.+36     	; 0x748 <__EEPROM_REGION_LENGTH__+0x348>
 724:	9b 01       	movw	r18, r22
 726:	ac 01       	movw	r20, r24
 728:	c7 01       	movw	r24, r14
 72a:	b6 01       	movw	r22, r12
 72c:	0e 94 cf 03 	call	0x79e	; 0x79e <__subsf3>
 730:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z3modf>
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	5f e3       	ldi	r21, 0x3F	; 63
 73c:	0e 94 3c 04 	call	0x878	; 0x878 <__cmpsf2>
 740:	88 23       	and	r24, r24
 742:	24 f4       	brge	.+8      	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	03 c0       	rjmp	.+6      	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	01 c0       	rjmp	.+2      	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	88 23       	and	r24, r24
 750:	61 f0       	breq	.+24     	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
					TCCR1B&=~(1<<CS10)|(1<<CS12);
 752:	8e b5       	in	r24, 0x2e	; 46
 754:	8e 7f       	andi	r24, 0xFE	; 254
 756:	8e bd       	out	0x2e, r24	; 46
					TCNT1=0;
 758:	1d bc       	out	0x2d, r1	; 45
 75a:	1c bc       	out	0x2c, r1	; 44
					PORTD &= ~(1<<apps_led);
 75c:	82 b3       	in	r24, 0x12	; 18
 75e:	8f 7b       	andi	r24, 0xBF	; 191
 760:	82 bb       	out	0x12, r24	; 18
					//PORTD &= ~(1<<testled);
					appsfault=0;
 762:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <appsfault+0x1>
 766:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <appsfault>
				}
				if(TCNT1>2000*16){
 76a:	8c b5       	in	r24, 0x2c	; 44
 76c:	9d b5       	in	r25, 0x2d	; 45
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	9d 47       	sbci	r25, 0x7D	; 125
 772:	08 f4       	brcc	.+2      	; 0x776 <__EEPROM_REGION_LENGTH__+0x376>
 774:	96 cf       	rjmp	.-212    	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
					OCR0=0;
 776:	1c be       	out	0x3c, r1	; 60
					PORTD&=~ (1<<motorcontroller);
 778:	82 b3       	in	r24, 0x12	; 18
 77a:	8f 7e       	andi	r24, 0xEF	; 239
 77c:	82 bb       	out	0x12, r24	; 18
					PORTD&=~(1<<RTD_LED); 
 77e:	82 b3       	in	r24, 0x12	; 18
 780:	87 7f       	andi	r24, 0xF7	; 247
 782:	82 bb       	out	0x12, r24	; 18
					PORTD|=(1<<apps_led);
 784:	82 b3       	in	r24, 0x12	; 18
 786:	80 64       	ori	r24, 0x40	; 64
 788:	82 bb       	out	0x12, r24	; 18
					TCCR1B&=~((1<<CS10)|(1<<CS12));
 78a:	8e b5       	in	r24, 0x2e	; 46
 78c:	8a 7f       	andi	r24, 0xFA	; 250
 78e:	8e bd       	out	0x2e, r24	; 46
					TCNT1=0;
 790:	1d bc       	out	0x2d, r1	; 45
 792:	1c bc       	out	0x2c, r1	; 44
					rtdmode=0;
 794:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <rtdmode+0x1>
 798:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rtdmode>
 79c:	82 cf       	rjmp	.-252    	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>

0000079e <__subsf3>:
 79e:	50 58       	subi	r21, 0x80	; 128

000007a0 <__addsf3>:
 7a0:	bb 27       	eor	r27, r27
 7a2:	aa 27       	eor	r26, r26
 7a4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__addsf3x>
 7a8:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 7ac:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 7b0:	38 f0       	brcs	.+14     	; 0x7c0 <__addsf3+0x20>
 7b2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 7b6:	20 f0       	brcs	.+8      	; 0x7c0 <__addsf3+0x20>
 7b8:	39 f4       	brne	.+14     	; 0x7c8 <__addsf3+0x28>
 7ba:	9f 3f       	cpi	r25, 0xFF	; 255
 7bc:	19 f4       	brne	.+6      	; 0x7c4 <__addsf3+0x24>
 7be:	26 f4       	brtc	.+8      	; 0x7c8 <__addsf3+0x28>
 7c0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3+0x28>
 7c6:	e0 95       	com	r30
 7c8:	e7 fb       	bst	r30, 7
 7ca:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>

000007ce <__addsf3x>:
 7ce:	e9 2f       	mov	r30, r25
 7d0:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 7d4:	58 f3       	brcs	.-42     	; 0x7ac <__addsf3+0xc>
 7d6:	ba 17       	cp	r27, r26
 7d8:	62 07       	cpc	r22, r18
 7da:	73 07       	cpc	r23, r19
 7dc:	84 07       	cpc	r24, r20
 7de:	95 07       	cpc	r25, r21
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <__addsf3x+0x1c>
 7e2:	79 f4       	brne	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e4:	a6 f5       	brtc	.+104    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7e6:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 7ea:	0e f4       	brtc	.+2      	; 0x7ee <__addsf3x+0x20>
 7ec:	e0 95       	com	r30
 7ee:	0b 2e       	mov	r0, r27
 7f0:	ba 2f       	mov	r27, r26
 7f2:	a0 2d       	mov	r26, r0
 7f4:	0b 01       	movw	r0, r22
 7f6:	b9 01       	movw	r22, r18
 7f8:	90 01       	movw	r18, r0
 7fa:	0c 01       	movw	r0, r24
 7fc:	ca 01       	movw	r24, r20
 7fe:	a0 01       	movw	r20, r0
 800:	11 24       	eor	r1, r1
 802:	ff 27       	eor	r31, r31
 804:	59 1b       	sub	r21, r25
 806:	99 f0       	breq	.+38     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 808:	59 3f       	cpi	r21, 0xF9	; 249
 80a:	50 f4       	brcc	.+20     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 80c:	50 3e       	cpi	r21, 0xE0	; 224
 80e:	68 f1       	brcs	.+90     	; 0x86a <__stack+0xb>
 810:	1a 16       	cp	r1, r26
 812:	f0 40       	sbci	r31, 0x00	; 0
 814:	a2 2f       	mov	r26, r18
 816:	23 2f       	mov	r18, r19
 818:	34 2f       	mov	r19, r20
 81a:	44 27       	eor	r20, r20
 81c:	58 5f       	subi	r21, 0xF8	; 248
 81e:	f3 cf       	rjmp	.-26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 820:	46 95       	lsr	r20
 822:	37 95       	ror	r19
 824:	27 95       	ror	r18
 826:	a7 95       	ror	r26
 828:	f0 40       	sbci	r31, 0x00	; 0
 82a:	53 95       	inc	r21
 82c:	c9 f7       	brne	.-14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82e:	7e f4       	brtc	.+30     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 830:	1f 16       	cp	r1, r31
 832:	ba 0b       	sbc	r27, r26
 834:	62 0b       	sbc	r22, r18
 836:	73 0b       	sbc	r23, r19
 838:	84 0b       	sbc	r24, r20
 83a:	ba f0       	brmi	.+46     	; 0x86a <__stack+0xb>
 83c:	91 50       	subi	r25, 0x01	; 1
 83e:	a1 f0       	breq	.+40     	; 0x868 <__stack+0x9>
 840:	ff 0f       	add	r31, r31
 842:	bb 1f       	adc	r27, r27
 844:	66 1f       	adc	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	c2 f7       	brpl	.-16     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 84c:	0e c0       	rjmp	.+28     	; 0x86a <__stack+0xb>
 84e:	ba 0f       	add	r27, r26
 850:	62 1f       	adc	r22, r18
 852:	73 1f       	adc	r23, r19
 854:	84 1f       	adc	r24, r20
 856:	48 f4       	brcc	.+18     	; 0x86a <__stack+0xb>
 858:	87 95       	ror	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b7 95       	ror	r27
 860:	f7 95       	ror	r31
 862:	9e 3f       	cpi	r25, 0xFE	; 254
 864:	08 f0       	brcs	.+2      	; 0x868 <__stack+0x9>
 866:	b0 cf       	rjmp	.-160    	; 0x7c8 <__addsf3+0x28>
 868:	93 95       	inc	r25
 86a:	88 0f       	add	r24, r24
 86c:	08 f0       	brcs	.+2      	; 0x870 <__stack+0x11>
 86e:	99 27       	eor	r25, r25
 870:	ee 0f       	add	r30, r30
 872:	97 95       	ror	r25
 874:	87 95       	ror	r24
 876:	08 95       	ret

00000878 <__cmpsf2>:
 878:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fp_cmp>
 87c:	08 f4       	brcc	.+2      	; 0x880 <__cmpsf2+0x8>
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	08 95       	ret

00000882 <__divsf3>:
 882:	0e 94 55 04 	call	0x8aa	; 0x8aa <__divsf3x>
 886:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 88a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 88e:	58 f0       	brcs	.+22     	; 0x8a6 <__divsf3+0x24>
 890:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 894:	40 f0       	brcs	.+16     	; 0x8a6 <__divsf3+0x24>
 896:	29 f4       	brne	.+10     	; 0x8a2 <__divsf3+0x20>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	29 f0       	breq	.+10     	; 0x8a6 <__divsf3+0x24>
 89c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 8a0:	51 11       	cpse	r21, r1
 8a2:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 8a6:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>

000008aa <__divsf3x>:
 8aa:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 8ae:	68 f3       	brcs	.-38     	; 0x88a <__divsf3+0x8>

000008b0 <__divsf3_pse>:
 8b0:	99 23       	and	r25, r25
 8b2:	b1 f3       	breq	.-20     	; 0x8a0 <__divsf3+0x1e>
 8b4:	55 23       	and	r21, r21
 8b6:	91 f3       	breq	.-28     	; 0x89c <__divsf3+0x1a>
 8b8:	95 1b       	sub	r25, r21
 8ba:	55 0b       	sbc	r21, r21
 8bc:	bb 27       	eor	r27, r27
 8be:	aa 27       	eor	r26, r26
 8c0:	62 17       	cp	r22, r18
 8c2:	73 07       	cpc	r23, r19
 8c4:	84 07       	cpc	r24, r20
 8c6:	38 f0       	brcs	.+14     	; 0x8d6 <__divsf3_pse+0x26>
 8c8:	9f 5f       	subi	r25, 0xFF	; 255
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255
 8cc:	22 0f       	add	r18, r18
 8ce:	33 1f       	adc	r19, r19
 8d0:	44 1f       	adc	r20, r20
 8d2:	aa 1f       	adc	r26, r26
 8d4:	a9 f3       	breq	.-22     	; 0x8c0 <__divsf3_pse+0x10>
 8d6:	35 d0       	rcall	.+106    	; 0x942 <__divsf3_pse+0x92>
 8d8:	0e 2e       	mov	r0, r30
 8da:	3a f0       	brmi	.+14     	; 0x8ea <__divsf3_pse+0x3a>
 8dc:	e0 e8       	ldi	r30, 0x80	; 128
 8de:	32 d0       	rcall	.+100    	; 0x944 <__divsf3_pse+0x94>
 8e0:	91 50       	subi	r25, 0x01	; 1
 8e2:	50 40       	sbci	r21, 0x00	; 0
 8e4:	e6 95       	lsr	r30
 8e6:	00 1c       	adc	r0, r0
 8e8:	ca f7       	brpl	.-14     	; 0x8dc <__divsf3_pse+0x2c>
 8ea:	2b d0       	rcall	.+86     	; 0x942 <__divsf3_pse+0x92>
 8ec:	fe 2f       	mov	r31, r30
 8ee:	29 d0       	rcall	.+82     	; 0x942 <__divsf3_pse+0x92>
 8f0:	66 0f       	add	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	bb 1f       	adc	r27, r27
 8f8:	26 17       	cp	r18, r22
 8fa:	37 07       	cpc	r19, r23
 8fc:	48 07       	cpc	r20, r24
 8fe:	ab 07       	cpc	r26, r27
 900:	b0 e8       	ldi	r27, 0x80	; 128
 902:	09 f0       	breq	.+2      	; 0x906 <__divsf3_pse+0x56>
 904:	bb 0b       	sbc	r27, r27
 906:	80 2d       	mov	r24, r0
 908:	bf 01       	movw	r22, r30
 90a:	ff 27       	eor	r31, r31
 90c:	93 58       	subi	r25, 0x83	; 131
 90e:	5f 4f       	sbci	r21, 0xFF	; 255
 910:	3a f0       	brmi	.+14     	; 0x920 <__divsf3_pse+0x70>
 912:	9e 3f       	cpi	r25, 0xFE	; 254
 914:	51 05       	cpc	r21, r1
 916:	78 f0       	brcs	.+30     	; 0x936 <__divsf3_pse+0x86>
 918:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 91c:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 920:	5f 3f       	cpi	r21, 0xFF	; 255
 922:	e4 f3       	brlt	.-8      	; 0x91c <__divsf3_pse+0x6c>
 924:	98 3e       	cpi	r25, 0xE8	; 232
 926:	d4 f3       	brlt	.-12     	; 0x91c <__divsf3_pse+0x6c>
 928:	86 95       	lsr	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b7 95       	ror	r27
 930:	f7 95       	ror	r31
 932:	9f 5f       	subi	r25, 0xFF	; 255
 934:	c9 f7       	brne	.-14     	; 0x928 <__divsf3_pse+0x78>
 936:	88 0f       	add	r24, r24
 938:	91 1d       	adc	r25, r1
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret
 942:	e1 e0       	ldi	r30, 0x01	; 1
 944:	66 0f       	add	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	bb 1f       	adc	r27, r27
 94c:	62 17       	cp	r22, r18
 94e:	73 07       	cpc	r23, r19
 950:	84 07       	cpc	r24, r20
 952:	ba 07       	cpc	r27, r26
 954:	20 f0       	brcs	.+8      	; 0x95e <__divsf3_pse+0xae>
 956:	62 1b       	sub	r22, r18
 958:	73 0b       	sbc	r23, r19
 95a:	84 0b       	sbc	r24, r20
 95c:	ba 0b       	sbc	r27, r26
 95e:	ee 1f       	adc	r30, r30
 960:	88 f7       	brcc	.-30     	; 0x944 <__divsf3_pse+0x94>
 962:	e0 95       	com	r30
 964:	08 95       	ret

00000966 <__fixunssfsi>:
 966:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_splitA>
 96a:	88 f0       	brcs	.+34     	; 0x98e <__fixunssfsi+0x28>
 96c:	9f 57       	subi	r25, 0x7F	; 127
 96e:	98 f0       	brcs	.+38     	; 0x996 <__fixunssfsi+0x30>
 970:	b9 2f       	mov	r27, r25
 972:	99 27       	eor	r25, r25
 974:	b7 51       	subi	r27, 0x17	; 23
 976:	b0 f0       	brcs	.+44     	; 0x9a4 <__fixunssfsi+0x3e>
 978:	e1 f0       	breq	.+56     	; 0x9b2 <__fixunssfsi+0x4c>
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	1a f0       	brmi	.+6      	; 0x98a <__fixunssfsi+0x24>
 984:	ba 95       	dec	r27
 986:	c9 f7       	brne	.-14     	; 0x97a <__fixunssfsi+0x14>
 988:	14 c0       	rjmp	.+40     	; 0x9b2 <__fixunssfsi+0x4c>
 98a:	b1 30       	cpi	r27, 0x01	; 1
 98c:	91 f0       	breq	.+36     	; 0x9b2 <__fixunssfsi+0x4c>
 98e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_zero>
 992:	b1 e0       	ldi	r27, 0x01	; 1
 994:	08 95       	ret
 996:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 99a:	67 2f       	mov	r22, r23
 99c:	78 2f       	mov	r23, r24
 99e:	88 27       	eor	r24, r24
 9a0:	b8 5f       	subi	r27, 0xF8	; 248
 9a2:	39 f0       	breq	.+14     	; 0x9b2 <__fixunssfsi+0x4c>
 9a4:	b9 3f       	cpi	r27, 0xF9	; 249
 9a6:	cc f3       	brlt	.-14     	; 0x99a <__fixunssfsi+0x34>
 9a8:	86 95       	lsr	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b3 95       	inc	r27
 9b0:	d9 f7       	brne	.-10     	; 0x9a8 <__fixunssfsi+0x42>
 9b2:	3e f4       	brtc	.+14     	; 0x9c2 <__fixunssfsi+0x5c>
 9b4:	90 95       	com	r25
 9b6:	80 95       	com	r24
 9b8:	70 95       	com	r23
 9ba:	61 95       	neg	r22
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__floatunsisf>:
 9c4:	e8 94       	clt
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <__floatsisf+0x12>

000009c8 <__floatsisf>:
 9c8:	97 fb       	bst	r25, 7
 9ca:	3e f4       	brtc	.+14     	; 0x9da <__floatsisf+0x12>
 9cc:	90 95       	com	r25
 9ce:	80 95       	com	r24
 9d0:	70 95       	com	r23
 9d2:	61 95       	neg	r22
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	99 23       	and	r25, r25
 9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x40>
 9de:	f9 2f       	mov	r31, r25
 9e0:	96 e9       	ldi	r25, 0x96	; 150
 9e2:	bb 27       	eor	r27, r27
 9e4:	93 95       	inc	r25
 9e6:	f6 95       	lsr	r31
 9e8:	87 95       	ror	r24
 9ea:	77 95       	ror	r23
 9ec:	67 95       	ror	r22
 9ee:	b7 95       	ror	r27
 9f0:	f1 11       	cpse	r31, r1
 9f2:	f8 cf       	rjmp	.-16     	; 0x9e4 <__floatsisf+0x1c>
 9f4:	fa f4       	brpl	.+62     	; 0xa34 <__floatsisf+0x6c>
 9f6:	bb 0f       	add	r27, r27
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__floatsisf+0x36>
 9fa:	60 ff       	sbrs	r22, 0
 9fc:	1b c0       	rjmp	.+54     	; 0xa34 <__floatsisf+0x6c>
 9fe:	6f 5f       	subi	r22, 0xFF	; 255
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	16 c0       	rjmp	.+44     	; 0xa34 <__floatsisf+0x6c>
 a08:	88 23       	and	r24, r24
 a0a:	11 f0       	breq	.+4      	; 0xa10 <__floatsisf+0x48>
 a0c:	96 e9       	ldi	r25, 0x96	; 150
 a0e:	11 c0       	rjmp	.+34     	; 0xa32 <__floatsisf+0x6a>
 a10:	77 23       	and	r23, r23
 a12:	21 f0       	breq	.+8      	; 0xa1c <__floatsisf+0x54>
 a14:	9e e8       	ldi	r25, 0x8E	; 142
 a16:	87 2f       	mov	r24, r23
 a18:	76 2f       	mov	r23, r22
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__floatsisf+0x5e>
 a1c:	66 23       	and	r22, r22
 a1e:	71 f0       	breq	.+28     	; 0xa3c <__floatsisf+0x74>
 a20:	96 e8       	ldi	r25, 0x86	; 134
 a22:	86 2f       	mov	r24, r22
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	2a f0       	brmi	.+10     	; 0xa34 <__floatsisf+0x6c>
 a2a:	9a 95       	dec	r25
 a2c:	66 0f       	add	r22, r22
 a2e:	77 1f       	adc	r23, r23
 a30:	88 1f       	adc	r24, r24
 a32:	da f7       	brpl	.-10     	; 0xa2a <__floatsisf+0x62>
 a34:	88 0f       	add	r24, r24
 a36:	96 95       	lsr	r25
 a38:	87 95       	ror	r24
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <__fp_cmp>:
 a3e:	99 0f       	add	r25, r25
 a40:	00 08       	sbc	r0, r0
 a42:	55 0f       	add	r21, r21
 a44:	aa 0b       	sbc	r26, r26
 a46:	e0 e8       	ldi	r30, 0x80	; 128
 a48:	fe ef       	ldi	r31, 0xFE	; 254
 a4a:	16 16       	cp	r1, r22
 a4c:	17 06       	cpc	r1, r23
 a4e:	e8 07       	cpc	r30, r24
 a50:	f9 07       	cpc	r31, r25
 a52:	c0 f0       	brcs	.+48     	; 0xa84 <__fp_cmp+0x46>
 a54:	12 16       	cp	r1, r18
 a56:	13 06       	cpc	r1, r19
 a58:	e4 07       	cpc	r30, r20
 a5a:	f5 07       	cpc	r31, r21
 a5c:	98 f0       	brcs	.+38     	; 0xa84 <__fp_cmp+0x46>
 a5e:	62 1b       	sub	r22, r18
 a60:	73 0b       	sbc	r23, r19
 a62:	84 0b       	sbc	r24, r20
 a64:	95 0b       	sbc	r25, r21
 a66:	39 f4       	brne	.+14     	; 0xa76 <__fp_cmp+0x38>
 a68:	0a 26       	eor	r0, r26
 a6a:	61 f0       	breq	.+24     	; 0xa84 <__fp_cmp+0x46>
 a6c:	23 2b       	or	r18, r19
 a6e:	24 2b       	or	r18, r20
 a70:	25 2b       	or	r18, r21
 a72:	21 f4       	brne	.+8      	; 0xa7c <__fp_cmp+0x3e>
 a74:	08 95       	ret
 a76:	0a 26       	eor	r0, r26
 a78:	09 f4       	brne	.+2      	; 0xa7c <__fp_cmp+0x3e>
 a7a:	a1 40       	sbci	r26, 0x01	; 1
 a7c:	a6 95       	lsr	r26
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	81 1d       	adc	r24, r1
 a82:	81 1d       	adc	r24, r1
 a84:	08 95       	ret

00000a86 <__fp_inf>:
 a86:	97 f9       	bld	r25, 7
 a88:	9f 67       	ori	r25, 0x7F	; 127
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	08 95       	ret

00000a92 <__fp_nan>:
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	80 ec       	ldi	r24, 0xC0	; 192
 a96:	08 95       	ret

00000a98 <__fp_pscA>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	09 06       	cpc	r0, r25
 aa4:	08 95       	ret

00000aa6 <__fp_pscB>:
 aa6:	00 24       	eor	r0, r0
 aa8:	0a 94       	dec	r0
 aaa:	12 16       	cp	r1, r18
 aac:	13 06       	cpc	r1, r19
 aae:	14 06       	cpc	r1, r20
 ab0:	05 06       	cpc	r0, r21
 ab2:	08 95       	ret

00000ab4 <__fp_round>:
 ab4:	09 2e       	mov	r0, r25
 ab6:	03 94       	inc	r0
 ab8:	00 0c       	add	r0, r0
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0xc>
 abc:	88 23       	and	r24, r24
 abe:	52 f0       	brmi	.+20     	; 0xad4 <__fp_round+0x20>
 ac0:	bb 0f       	add	r27, r27
 ac2:	40 f4       	brcc	.+16     	; 0xad4 <__fp_round+0x20>
 ac4:	bf 2b       	or	r27, r31
 ac6:	11 f4       	brne	.+4      	; 0xacc <__fp_round+0x18>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <__fp_round+0x20>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__fp_split3>:
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	90 58       	subi	r25, 0x80	; 128
 ada:	44 0f       	add	r20, r20
 adc:	55 1f       	adc	r21, r21
 ade:	59 f0       	breq	.+22     	; 0xaf6 <__fp_splitA+0x10>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__fp_splitA+0x1a>
 ae4:	47 95       	ror	r20

00000ae6 <__fp_splitA>:
 ae6:	88 0f       	add	r24, r24
 ae8:	97 fb       	bst	r25, 7
 aea:	99 1f       	adc	r25, r25
 aec:	61 f0       	breq	.+24     	; 0xb06 <__fp_splitA+0x20>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	79 f0       	breq	.+30     	; 0xb10 <__fp_splitA+0x2a>
 af2:	87 95       	ror	r24
 af4:	08 95       	ret
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	55 1f       	adc	r21, r21
 afe:	f2 cf       	rjmp	.-28     	; 0xae4 <__fp_split3+0xe>
 b00:	46 95       	lsr	r20
 b02:	f1 df       	rcall	.-30     	; 0xae6 <__fp_splitA>
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__fp_splitA+0x30>
 b06:	16 16       	cp	r1, r22
 b08:	17 06       	cpc	r1, r23
 b0a:	18 06       	cpc	r1, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	f1 cf       	rjmp	.-30     	; 0xaf2 <__fp_splitA+0xc>
 b10:	86 95       	lsr	r24
 b12:	71 05       	cpc	r23, r1
 b14:	61 05       	cpc	r22, r1
 b16:	08 94       	sec
 b18:	08 95       	ret

00000b1a <__fp_zero>:
 b1a:	e8 94       	clt

00000b1c <__fp_szero>:
 b1c:	bb 27       	eor	r27, r27
 b1e:	66 27       	eor	r22, r22
 b20:	77 27       	eor	r23, r23
 b22:	cb 01       	movw	r24, r22
 b24:	97 f9       	bld	r25, 7
 b26:	08 95       	ret

00000b28 <__gesf2>:
 b28:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fp_cmp>
 b2c:	08 f4       	brcc	.+2      	; 0xb30 <__gesf2+0x8>
 b2e:	8f ef       	ldi	r24, 0xFF	; 255
 b30:	08 95       	ret

00000b32 <__mulsf3>:
 b32:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3x>
 b36:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 b3a:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 b3e:	38 f0       	brcs	.+14     	; 0xb4e <__mulsf3+0x1c>
 b40:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__mulsf3+0x1c>
 b46:	95 23       	and	r25, r21
 b48:	11 f0       	breq	.+4      	; 0xb4e <__mulsf3+0x1c>
 b4a:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 b4e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 b52:	11 24       	eor	r1, r1
 b54:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>

00000b58 <__mulsf3x>:
 b58:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 b5c:	70 f3       	brcs	.-36     	; 0xb3a <__mulsf3+0x8>

00000b5e <__mulsf3_pse>:
 b5e:	95 9f       	mul	r25, r21
 b60:	c1 f3       	breq	.-16     	; 0xb52 <__mulsf3+0x20>
 b62:	95 0f       	add	r25, r21
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	55 1f       	adc	r21, r21
 b68:	62 9f       	mul	r22, r18
 b6a:	f0 01       	movw	r30, r0
 b6c:	72 9f       	mul	r23, r18
 b6e:	bb 27       	eor	r27, r27
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	63 9f       	mul	r22, r19
 b76:	aa 27       	eor	r26, r26
 b78:	f0 0d       	add	r31, r0
 b7a:	b1 1d       	adc	r27, r1
 b7c:	aa 1f       	adc	r26, r26
 b7e:	64 9f       	mul	r22, r20
 b80:	66 27       	eor	r22, r22
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	66 1f       	adc	r22, r22
 b88:	82 9f       	mul	r24, r18
 b8a:	22 27       	eor	r18, r18
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	73 9f       	mul	r23, r19
 b94:	b0 0d       	add	r27, r0
 b96:	a1 1d       	adc	r26, r1
 b98:	62 1f       	adc	r22, r18
 b9a:	83 9f       	mul	r24, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	22 1f       	adc	r18, r18
 ba2:	74 9f       	mul	r23, r20
 ba4:	33 27       	eor	r19, r19
 ba6:	a0 0d       	add	r26, r0
 ba8:	61 1d       	adc	r22, r1
 baa:	23 1f       	adc	r18, r19
 bac:	84 9f       	mul	r24, r20
 bae:	60 0d       	add	r22, r0
 bb0:	21 1d       	adc	r18, r1
 bb2:	82 2f       	mov	r24, r18
 bb4:	76 2f       	mov	r23, r22
 bb6:	6a 2f       	mov	r22, r26
 bb8:	11 24       	eor	r1, r1
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	9a f0       	brmi	.+38     	; 0xbe6 <__mulsf3_pse+0x88>
 bc0:	f1 f0       	breq	.+60     	; 0xbfe <__mulsf3_pse+0xa0>
 bc2:	88 23       	and	r24, r24
 bc4:	4a f0       	brmi	.+18     	; 0xbd8 <__mulsf3_pse+0x7a>
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	bb 1f       	adc	r27, r27
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__mulsf3_pse+0x64>
 bd8:	9e 3f       	cpi	r25, 0xFE	; 254
 bda:	51 05       	cpc	r21, r1
 bdc:	80 f0       	brcs	.+32     	; 0xbfe <__mulsf3_pse+0xa0>
 bde:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 be2:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 be6:	5f 3f       	cpi	r21, 0xFF	; 255
 be8:	e4 f3       	brlt	.-8      	; 0xbe2 <__mulsf3_pse+0x84>
 bea:	98 3e       	cpi	r25, 0xE8	; 232
 bec:	d4 f3       	brlt	.-12     	; 0xbe2 <__mulsf3_pse+0x84>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f7 95       	ror	r31
 bf8:	e7 95       	ror	r30
 bfa:	9f 5f       	subi	r25, 0xFF	; 255
 bfc:	c1 f7       	brne	.-16     	; 0xbee <__mulsf3_pse+0x90>
 bfe:	fe 2b       	or	r31, r30
 c00:	88 0f       	add	r24, r24
 c02:	91 1d       	adc	r25, r1
 c04:	96 95       	lsr	r25
 c06:	87 95       	ror	r24
 c08:	97 f9       	bld	r25, 7
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
